# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'designer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from fileinput import filename
import resource_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtWidgets import (QApplication, QWidget, QMessageBox)

from threading import Thread
from time import sleep
import asyncio
from multiprocessing import Process, Queue

from utils import *
from functionMessage import *
from genGraph import *

import subprocess
import multiprocessing
from multiprocessing import Process

my_threads = []

class Stream(QtCore.QObject):
    newText = QtCore.pyqtSignal(str)

    def write(self, text):
        self.newText.emit(str(text))

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(600, 622)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(600, 622))
        MainWindow.setMaximumSize(QtCore.QSize(600, 622))
        MainWindow.setStyleSheet("b")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("b")
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 120, 581, 491))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.inicio = QtWidgets.QWidget()
        self.inicio.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.inicio.setObjectName("inicio")
        self.home = QtWidgets.QWidget(self.inicio)
        self.home.setGeometry(QtCore.QRect(0, 0, 571, 611))
        self.home.setObjectName("home")
        self.statusBrowse = QtWidgets.QLineEdit(self.home)
        self.statusBrowse.setEnabled(False)
        self.statusBrowse.setGeometry(QtCore.QRect(12, 10, 381, 21))
        self.statusBrowse.setObjectName("statusBrowse")
        self.buttonBrowse = QtWidgets.QPushButton(self.home)
        self.buttonBrowse.setGeometry(QtCore.QRect(400, 10, 161, 23))
        self.buttonBrowse.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.buttonBrowse.setAutoFillBackground(False)
        self.buttonBrowse.setStyleSheet("QPushButton:hover {\n"
                                        "    cursor: hand;\n"
                                        "    background-color: rgb(8, 26, 68);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton {\n"
                                        "background-color: rgb(11, 34, 88);\n"
                                        "color:white\n"
                                        "}")
        self.buttonBrowse.setInputMethodHints(QtCore.Qt.ImhNone)
        self.buttonBrowse.setObjectName("buttonBrowse")
        self.radioImaculada = QtWidgets.QRadioButton(self.home)
        self.radioImaculada.setGeometry(QtCore.QRect(10, 70, 171, 17))
        self.radioImaculada.setObjectName("radioImaculada")
        self.radioImaculada.setProperty("key", "imaculada conceicao")
        self.radioLuizSetti = QtWidgets.QRadioButton(self.home)
        self.radioLuizSetti.setGeometry(QtCore.QRect(10, 90, 82, 17))
        self.radioLuizSetti.setObjectName("radioLuizSetti")
        self.radioLuizSetti.setProperty("key", "luiz setti")
        self.radioRuiBarbosa = QtWidgets.QRadioButton(self.home)
        self.radioRuiBarbosa.setGeometry(QtCore.QRect(10, 110, 82, 17))
        self.radioRuiBarbosa.setObjectName("radioRuiBarbosa")
        self.radioRuiBarbosa.setProperty("key", "rui barbosa")
        self.radioJosePavan = QtWidgets.QRadioButton(self.home)
        self.radioJosePavan.setGeometry(QtCore.QRect(10, 130, 82, 17))
        self.radioJosePavan.setObjectName("radioJosePavan")
        self.radioJosePavan.setProperty("key", "jose pavan")
        self.radioGrupoActteens = QtWidgets.QRadioButton(self.home)
        self.radioGrupoActteens.setGeometry(QtCore.QRect(10, 150, 101, 17))
        self.radioGrupoActteens.setObjectName("radioGrupoActteens")
        self.radioGrupoActteens.setProperty("key", "grupo actteens")
        self.radioTodosAlunos = QtWidgets.QRadioButton(self.home)
        self.radioTodosAlunos.setGeometry(QtCore.QRect(10, 170, 161, 17))
        self.radioTodosAlunos.setObjectName("radioTodosAlunos")
        self.radioTodosAlunos.setProperty("key", "todos")
        self.radioTodosResponsaveis = QtWidgets.QRadioButton(self.home)
        self.radioTodosResponsaveis.setGeometry(QtCore.QRect(10, 190, 191, 17))
        self.radioTodosResponsaveis.setObjectName("radioTodosResponsaveis")
        self.radioTodosResponsaveis.setProperty("key", "todos")
        self.label = QtWidgets.QLabel(self.home)
        self.label.setGeometry(QtCore.QRect(10, 50, 201, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.home)
        self.label_2.setGeometry(QtCore.QRect(290, 50, 201, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("")
        self.label_2.setObjectName("label_2")
        self.consoleLog = QtWidgets.QTextEdit(self.home)
        self.consoleLog.setEnabled(True)
        self.consoleLog.setReadOnly(True)
        self.consoleLog.setGeometry(QtCore.QRect(10, 278, 551, 181))
        self.consoleLog.setStyleSheet("border: 3px solid rgb(11, 34, 88);")
        self.consoleLog.setObjectName("consoleLog")
        self.buttonSend = QtWidgets.QPushButton(self.home)
        self.buttonSend.setGeometry(QtCore.QRect(10, 220, 551, 23))
        self.buttonSend.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.buttonSend.setStyleSheet("QPushButton:hover {\n"
                                      "    cursor: hand;\n"
                                      "    background-color: rgb(8, 26, 68);\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton {\n"
                                      "background-color: rgb(11, 34, 88);\n"
                                      "color:white\n"
                                      "}")
        self.buttonSend.setObjectName("buttonSend")
        self.label_3 = QtWidgets.QLabel(self.home)
        self.label_3.setGeometry(QtCore.QRect(0, 470, 321, 31))
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.home)
        self.textEdit_2.setEnabled(False)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 250, 551, 31))
        self.textEdit_2.setStyleSheet(
            "background-color: rgb(11, 34, 88);border: 1px solid rgb(11, 34, 88);")
        self.textEdit_2.setObjectName("textEdit_2")
        self.comboBox = QtWidgets.QComboBox(self.home)
        self.comboBox.setGeometry(QtCore.QRect(290, 70, 241, 21))
        self.comboBox.setStyleSheet("")
        self.comboBox.setEditable(False)
        self.comboBox.setDuplicatesEnabled(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.tabWidget.addTab(self.inicio, "")
        self.config = QtWidgets.QWidget()
        self.config.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.config.setObjectName("config")
        self.label_4 = QtWidgets.QLabel(self.config)
        self.label_4.setGeometry(QtCore.QRect(20, 30, 211, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.config)
        self.label_5.setGeometry(QtCore.QRect(340, 30, 201, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("")
        self.label_5.setObjectName("label_5")
        self.buttonIntegridade = QtWidgets.QPushButton(self.config)
        self.buttonIntegridade.setGeometry(QtCore.QRect(20, 52, 211, 31))
        self.buttonIntegridade.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.buttonIntegridade.setAutoFillBackground(False)
        self.buttonIntegridade.setStyleSheet("QPushButton:hover {\n"
                                             "    cursor: hand;\n"
                                             "    background-color: rgb(8, 26, 68);\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton {\n"
                                             "background-color: rgb(11, 34, 88);\n"
                                             "color:white\n"
                                             "}")
        self.buttonIntegridade.setInputMethodHints(QtCore.Qt.ImhNone)
        self.buttonIntegridade.setObjectName("buttonIntegridade")
        self.buttonGrafico = QtWidgets.QPushButton(self.config)
        self.buttonGrafico.setGeometry(QtCore.QRect(340, 50, 211, 31))
        self.buttonGrafico.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.buttonGrafico.setAutoFillBackground(False)
        self.buttonGrafico.setStyleSheet("QPushButton:hover {\n"
                                         "    cursor: hand;\n"
                                         "    background-color: rgb(8, 26, 68);\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton {\n"
                                         "background-color: rgb(11, 34, 88);\n"
                                         "color:white\n"
                                         "}")
        self.buttonGrafico.setInputMethodHints(QtCore.Qt.ImhNone)
        self.buttonGrafico.setObjectName("buttonGrafico")
        self.tabWidget.addTab(self.config, "")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(20, 10, 561, 91))
        self.frame.setAutoFillBackground(False)
        self.frame.setStyleSheet("background-image: url(:/banner_actteens/banner.png);\n"
                                 "  background-repeat: no-repeat;\n"
                                 "")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        sys.stdout = Stream(newText=self.onUpdateText)

    def onUpdateText(self, text):
        if len(text) > 5:
            cursor = self.consoleLog.textCursor()
            cursor.movePosition(QtGui.QTextCursor.End)
            self.consoleLog.append(text)
            self.consoleLog.setTextCursor(cursor)
            self.consoleLog.ensureCursorVisible()       

    def pushButton_browse(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        self.statusBrowse.setText(path)

    def pushButton_submit(self):
        escola = ""
        for radio in self.home.findChildren(QtWidgets.QRadioButton):
            if radio.isChecked():
                escola += radio.property("key")
        turma = self.comboBox.currentText()
        filepath = self.statusBrowse.text()
        if escola == "":
            self.consoleLog.append(errorFormat.format(
                f"[{getTime()}] Você não selecionou uma escola"))
            return
        if turma == "" or turma.endswith("..."):
            self.consoleLog.append(errorFormat.format(
                f"[{getTime()}] Você não selecionou uma turma"))
            return
        if filepath == "":
            self.consoleLog.append(errorFormat.format(
                f"[{getTime()}] Você não selecionou um arquivo"))
            return

        if filepath.endswith(".txt"):
            self.consoleLog.append(validFormat.format(f"-> Escola: {escola}"))
            self.consoleLog.append(validFormat.format(f"-> Turma: {turma}"))
            self.consoleLog.append(validFormat.format(
                f"-> Tipo mensagem: Texto"))
            if turma == "todos":
                thread = Thread(target=sendMessageTodos,
                            args=(escola, turma, filepath))
            else:
                thread = Thread(target=sendMessage,
                            args=(escola, turma, filepath))
            thread.start()
            my_threads.append(thread)
        else:
            self.consoleLog.append(validFormat.format(f"-> Escola: {escola}"))
            self.consoleLog.append(validFormat.format(f"-> Turma: {turma}"))
            self.consoleLog.append(validFormat.format(
                f"-> Tipo mensagem: Imagem / Video"))
            if turma == "todos":
                thread = Thread(target=sendFileTodos,
                            args=(escola, turma, filepath))
            else:
                thread = Thread(target=sendFile,
                            args=(escola, turma, filepath))
            thread.start()
            my_threads.append(thread)

    def radioPress_Imaculada(self):
        self.comboBox.clear()
        itens = ['8C', '8D', '9B', '9D']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_LuizSetti(self):
        self.comboBox.clear()
        itens = ['8A', '9C']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_RuiBarbosa(self):
        self.comboBox.clear()
        itens = ['8A', '9A']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_JosePavan(self):
        self.comboBox.clear()
        itens = ['8A', '8B', '9A', '9B']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_GrupoActteens(self):
        self.comboBox.clear()
        itens = ['grupo']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_Alunos(self):
        self.comboBox.clear()
        itens = ['alunos']
        for x in itens:
              self.comboBox.addItem(str(x))
    def radioPress_Responsaveis(self):
        self.comboBox.clear()
        itens = ['responsaveis']
        for x in itens:
              self.comboBox.addItem(str(x))

    def pushButton_genGraph(self):
        genGraph()

    def pushButton_checkFiles(self):
        check = checkFiles()
        if (len(check[0]) + len(check[1]) + len(check[2])) == 0:
            msg = QMessageBox()
            msg.setWindowTitle("Verificar integridade")
            msg.setText("Integridade do software está em 100%")
            msg.setIcon(QMessageBox.Information)
            msg.exec_()
            return

        aux1 = ""
        aux2 = ""
        aux3 = ""
        for x in check[0]:
            aux1 += f"{x} \n"
        for x in check[1]:
            aux2 += f"{x} \n"
        for x in check[2]:
            aux3 += f"{x} \n"
        
        msg = QMessageBox()
        msg.setWindowTitle("Tutorial on PyQt5")
        msg.setText(f"Integridade das pastas: \n{aux1}\n\nIntegridade dos arquivos: \n{aux2}\n\nIntegridade dos excel: \n{aux3}")
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Automação ACTTEENS - Whatsapp"))
        self.buttonBrowse.setText(_translate("MainWindow", "Escolher arquivo"))
        self.buttonBrowse.clicked.connect(self.pushButton_browse)
        self.radioImaculada.setText(_translate(
            "MainWindow", "Imaculada Conceição"))
        self.radioImaculada.toggled.connect(self.radioPress_Imaculada)

        self.radioLuizSetti.setText(_translate("MainWindow", "Luiz Setti"))
        self.radioLuizSetti.toggled.connect(self.radioPress_LuizSetti)

        self.radioRuiBarbosa.setText(_translate("MainWindow", "Rui Barbosa"))
        self.radioRuiBarbosa.toggled.connect(self.radioPress_RuiBarbosa)

        self.radioJosePavan.setText(_translate("MainWindow", "José Pavan"))
        self.radioJosePavan.toggled.connect(self.radioPress_JosePavan)

        self.radioGrupoActteens.setText(
            _translate("MainWindow", "Grupo Actteens"))
        self.radioGrupoActteens.toggled.connect(self.radioPress_GrupoActteens)

        self.radioTodosAlunos.setText(_translate(
            "MainWindow", "Enviar para todos os alunos"))
        self.radioTodosAlunos.toggled.connect(self.radioPress_Alunos)

        self.radioTodosResponsaveis.setText(_translate(
            "MainWindow", "Enviar para todos os responsáveis"))
        self.radioTodosResponsaveis.toggled.connect(self.radioPress_Responsaveis) 

        self.label.setText(_translate("MainWindow", "Selecione a escola:"))
        self.label_2.setText(_translate(
            "MainWindow", "Selecione uma escola primeiro..."))
        self.consoleLog.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">1\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                           "<p style=\"-qt-paragraph-type:empty; margin-top:0; margin-bottom:0; margin-left:0px; margin-right:0px;color: black; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.buttonSend.setText(_translate("MainWindow", "Enviar mensagem"))
        self.buttonSend.clicked.connect(self.pushButton_submit)
        self.label_3.setText(_translate(
            "MainWindow", "Desenvolvidor por Gabriel Lima (gabriellimamoraes@gmail.com)"))
        self.textEdit_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                           "<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600; color:#ffffff;\">ACTTENS Logs</span></p></body></html>"))
        self.comboBox.setCurrentText(_translate(
            "MainWindow", " Selecione uma turma..."))
        self.comboBox.setItemText(0, _translate(
            "MainWindow", " Selecione uma turma..."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.inicio), _translate("MainWindow", "Inicio"))
        self.label_4.setText(_translate(
            "MainWindow", "Verificar integridade do software:"))
        self.label_5.setText(_translate(
            "MainWindow", "Gerar gráfico dos dados:"))
        self.buttonIntegridade.setText(_translate(
            "MainWindow", "Verificar integridade"))
        self.buttonIntegridade.clicked.connect(self.pushButton_checkFiles)
        self.buttonGrafico.setText(_translate("MainWindow", "Gerar gráfico"))
        self.buttonGrafico.clicked.connect(self.pushButton_genGraph)
        self.tabWidget.setTabText(self.tabWidget.indexOf(
            self.config), _translate("MainWindow", "Configurações"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowIcon(QtGui.QIcon("resources/favicon.ico"))
    MainWindow.show()
    sys.exit(app.exec_())
